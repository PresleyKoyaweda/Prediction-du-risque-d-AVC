import streamlit as st
import pandas as pd
from api.model_loader import load_model_and_predict 
from datetime import datetime
import os 
import uuid #pour g√©n√©rer un id unique
from scipy.stats import ks_2samp

st.set_page_config(page_title="D√©tection AVC", page_icon="üß†")

#Navigation

PAGE_PREDICTION = "Interface de pr√©diction"
PAGE_MONITORING = "Suivi du mod√®le"

st.sidebar.title("Navigation")
page = st.sidebar.radio("Aller √†",[PAGE_PREDICTION, PAGE_MONITORING])

if page == PAGE_PREDICTION:

    # Configuration de la page
    st.info("‚ÑπÔ∏è Ce site est √† des fins de d√©monstration. Ne remplace pas un avis m√©dical.")
    st.title("üß† Pr√©diction du Risque d'AVC")

    # Introduction
    st.markdown("""
    ##### üí° Pourquoi ce projet ?

    Les **accidents vasculaires c√©r√©braux (AVC)** sont une cause majeure de **mortalit√© et de handicap**.

    Ce projet vise √† fournir un outil d‚Äôaide √† la d√©cision simple pour **d√©tecter les patients √† risque**  
    et permettre une **prise en charge pr√©coce**.

    ##### üîç Facteurs de risque identifi√©s dans les donn√©es

    - **√Çge √©lev√©** : les AVC surviennent majoritairement chez les patients de **plus de 60 ans**.
    - **Hypertension** : 13% des patients hypertendus ont eu un AVC, contre 4% des non-hypertendus.
    - **Maladie cardiaque** : le risque est multipli√© par 4 chez les patients cardiaques.
    - **Glucose √©lev√©** : des pics autour de 200 mg/dL sont fr√©quents chez les patients ayant subi un AVC.
    - **Tabagisme** : les anciens fumeurs sont les plus √† risque (7,9%).

    ##### üéØ Objectifs
    - Identifier les profils √† risque √† partir de donn√©es m√©dicales
    - Offrir une interface intuitive pour les professionnels de sant√©

    Le jeu de donn√©es utilis√© pr√©sente un d√©s√©quilibre marqu√© : **seulement 4,87‚ÄØ% des 5210 observations concernent des patients ayant subi un AVC**. Pour rem√©dier √† ce d√©s√©quilibre, des techniques de r√©√©chantillonnage ont √©t√© utilis√©es afin d‚Äôam√©liorer la performance du mod√®le sur la classe minoritaire.
    """)

    # Formulaire de saisie
    st.markdown("Entrez les informations m√©dicales pour estimer le risque d'AVC li√© au patient.")

    with st.form("form"):
        name = st.text_input("Nom du patient (optionnel)")
        gender = st.selectbox("Sexe", ["Male", "Female", "Other"])
        age = st.slider("√Çge", 0, 100, 50)
        hypertension = st.selectbox("Hypertension", ["Yes", "No"])
        heart_disease = st.selectbox("Maladie cardiaque", ["Yes", "No"])
        ever_married = st.selectbox("Avez-vous d√©j√† √©t√© mari√©(e) ?", ["Yes", "No"])
        work_type = st.selectbox("Type de travail", ["Private", "Self-employed", "Govt_job", "children", "Never_worked"])
        residence_type = st.selectbox("Type de r√©sidence", ["Urban", "Rural"])
        avg_glucose_level = st.number_input("Taux moyen de glucose", min_value=50.0, max_value=300.0, value=100.0)
        bmi = st.number_input("IMC", min_value=10.0, max_value=60.0, value=25.0)
        smoking_status = st.selectbox("Statut tabagique", ["never smoked", "formerly smoked", "smokes", "Unknown"])
        
        submitted = st.form_submit_button("Pr√©dire")

    # Appel mod√®le apr√®s soumission
    if submitted:
    
        
        # Donn√©es utilis√©es uniquement pour le mod√®le
        input_data = pd.DataFrame([{
            "gender": gender,
            "age": age,
            "hypertension": 1 if hypertension == "Yes" else 0,
            "heart_disease": 1 if heart_disease == "Yes" else 0,
            "ever_married": ever_married,
            "work_type": work_type,
            "Residence_type": residence_type,
            "avg_glucose_level": avg_glucose_level,
            "bmi": bmi,
            "smoking_status": smoking_status
        }])

        try:
            prediction, proba = load_model_and_predict(input_data)
            st.success(f"‚úÖ Pr√©diction AVC : {'Oui (1)' if prediction else 'Non (0)'}")
            st.info(f"üß™ Probabilit√© estim√©e : {round(proba, 3)}")
            
            
            #Log de prediction
            log_data = input_data.copy()
            log_data["name"] = name
            log_data["id_prediction"] = str(uuid.uuid1())
            log_data["prediction"] = prediction
            log_data["probability"] = proba
            log_data["true_label"] = None
            log_data["timestamp"] = datetime.now().isoformat()

            #Ajout a mon CVS
            os.makedirs("logs", exist_ok=True)
            
            log_file = "logs/predictions.csv"
            write_header = not os.path.exists(log_file) or os.stat(log_file).st_size == 0
            
            log_data.to_csv(log_file, mode="a", header=write_header, index=False)
            
            
        except Exception as e:
            st.error(f"‚ùå Erreur de pr√©diction : {str(e)}")
            

    # Pied de page
    st.markdown("""
    <hr style="border: 0.5px solid #ddd;">
    <div style="text-align:center">
        <small>¬© 2025 ‚Äì Outil de pr√©diction AVC ‚Äì Fait avec ‚ù§Ô∏è par Presley Koyaweda</small>
    </div>
    """, unsafe_allow_html=True)
    
elif  page == PAGE_MONITORING:
    
    st.info("‚ÑπÔ∏è Ce site est √† des fins de d√©monstration. Ne remplace pas un avis m√©dical.")
    st.title("üìä Monitoring des pr√©dictions")
    
    # üîç Explication p√©dagogique
    with st.expander("‚ÑπÔ∏è Informations sur les m√©triques de performance", expanded=True):
        st.warning("""
        ‚ö†Ô∏è Les √©tiquettes r√©elles (`true labels`) ne sont pas disponibles pour les pr√©dictions en production.  
        ‚ùå Cela rend impossible le calcul de m√©triques telles que : pr√©cision, rappel, F1-score, AUC, etc.  

        ‚úÖ Le monitoring repose donc uniquement sur :
        - les distributions des probabilit√©s de sortie (`probability`)
        - la fr√©quence des classes pr√©dites (`predictions`)
        - les d√©rives statistiques sur les variables d‚Äôentr√©e (test de Kolmogorov‚ÄìSmirnov)
        - l‚Äôincertitude globale via l'entropie de la distribution des pr√©dictions

        üîÅ Ce syst√®me permet de :
        - d√©tecter les changements suspects dans les donn√©es ou dans le comportement du mod√®le
        - alerter un expert pour annotation manuelle
        - lancer un √©ventuel r√©-entra√Ænement (manuel ou semi-auto) une fois les vraies √©tiquettes disponibles
        """)


    log_file = "logs/predictions.csv"
    reference_file = "data/train.csv"

    if not os.path.exists(log_file):
        st.warning("üì≠ Aucune donn√©e de pr√©diction trouv√©e pour le moment.")
        st.stop()

    df = pd.read_csv(log_file)

    if "timestamp" in df.columns:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        df = df.sort_values("timestamp")
    else:
        st.error("‚õî La colonne 'timestamp' est absente du fichier CSV.")
        st.stop()

    # üìå Statistiques globales
    st.subheader("üìå Statistiques g√©n√©rales")
    st.write(df[["predictions", "probability"]].describe())

    # üìà R√©partition des classes
    st.subheader("üìà R√©partition des pr√©dictions")
    df["predictions_label"] = df["predictions"].map({0: "Pas d'AVC", 1: "AVC"})
    st.bar_chart(df["predictions_label"].value_counts(normalize=True))

    # ‚è≥ √âvolution temporelle
    st.subheader("üïí √âvolution temporelle de la probabilit√©")
    if len(df) < 10:
        st.warning("‚è≥ Pas encore assez de pr√©dictions pour afficher une moyenne glissante (minimum 10).")
    else:
        st.line_chart(df.set_index("timestamp")["probability"].rolling(window=10).mean())

    # üìÑ Donn√©es brutes
    with st.expander("üìÑ Voir les donn√©es brutes"):
        st.dataframe(df.tail(20))

    # === ‚ö†Ô∏è Analyse de d√©rive & alertes automatiques ===
    import matplotlib.pyplot as plt
    import seaborn as sns
    from scipy.stats import ks_2samp, entropy

    reference = pd.read_csv(reference_file)
    recent = df.copy()
    alertes = []
    EXPORT_ALERTS_FILE = "logs/cas_a_annoter.csv"

    st.subheader("üìâ Analyse des d√©rives statistiques")

    for col in ["age", "bmi", "avg_glucose_level"]:
        fig, ax = plt.subplots()
        sns.kdeplot(reference[col], label="Train", ax=ax)
        sns.kdeplot(recent[col], label="Production", ax=ax)
        ax.set_title(f"D√©rive potentielle sur {col}")
        st.pyplot(fig)

        # KS Test
        ks_stat, p_value = ks_2samp(reference[col], recent[col])
        if p_value < 0.01:
            st.error(f"üö® D√©rive d√©tect√©e sur '{col}' (p-value = {p_value:.4f})")
            alertes.append(f"D√©rive sur {col} (p = {p_value:.4f})")
        elif p_value < 0.05:
            st.warning(f"‚ö†Ô∏è D√©rive possible sur '{col}' (p-value = {p_value:.4f})")

    # üîÄ Entropie
    pred_dist = df["predictions"].value_counts(normalize=True)
    pred_entropy = entropy(pred_dist)
    st.metric("Entropie des pr√©dictions", round(pred_entropy, 3))

    if pred_entropy < 0.4:
        st.warning("‚ö†Ô∏è Entropie faible : le mod√®le semble trop s√ªr de ses pr√©dictions.")
        alertes.append(f"Entropie basse : {round(pred_entropy, 3)}")

    # üìä Variation du taux de pr√©dictions
    if "stroke" in reference.columns:
        avc_rate_ref = reference["stroke"].mean()
        avc_rate_pred = df["predictions"].mean()
        variation = abs(avc_rate_pred - avc_rate_ref)
        if variation > 0.2:
            st.warning(f"‚ö†Ô∏è Variation anormale du taux de pr√©diction AVC : {avc_rate_pred:.2%} vs {avc_rate_ref:.2%}")
            alertes.append(f"Variation taux AVC : {avc_rate_pred:.2%} vs {avc_rate_ref:.2%}")

    # üí° R√©sum√© des alertes et export
    if alertes:
        st.subheader("üö® Alerte automatique de d√©rive")
        for msg in alertes:
            st.write("‚Ä¢", msg)

        # Export des 20 derni√®res pr√©dictions pour annotation
        recent.sort_values("timestamp", ascending=False).head(20).to_csv(EXPORT_ALERTS_FILE, index=False)
        st.info(f"üìÅ 20 derniers cas export√©s pour annotation : `{EXPORT_ALERTS_FILE}`")
    else:
        st.success("‚úÖ Aucune d√©rive d√©tect√©e pour le moment.")

    # Pied de page
    st.markdown("""
    <hr style="border: 0.5px solid #ddd;">
    <div style="text-align:center">
        <small>¬© 2025 ‚Äì Outil de pr√©diction AVC ‚Äì Fait avec ‚ù§Ô∏è par Presley Koyaweda</small>
    </div>
    """, unsafe_allow_html=True)



